<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CentOS6配置Http Api远程操作Docker(持续更新)]]></title>
    <url>%2F2018%2F11%2F08%2FCentOS6%E9%85%8D%E7%BD%AEHttp-Api%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9CDocker%2F</url>
    <content type="text"><![CDATA[本地通过maven打包Docker镜像并上传服务器需要配置Docker API远程操作。 CentOS 6配置修改配置文件/etc/sysconfig/docker里的配置1vim /etc/sysconfig/docker 把原来的other_args=改为other_args=&quot;-H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375&quot; 重启docker使配置生效1service docker restart 检查下2375端口是不是在监听状态，有就表示配置成功，外网访问注意下防火墙1netstat -nap | grep 2375 访问服务器的Docker1http://host:port/info host: 你服务器的IP地址或域名port：端口号(本文的为2375)]]></content>
      <categories>
        <category>Docker</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS6.9安装Docker]]></title>
    <url>%2F2018%2F11%2F08%2FCentOS6-9%E5%AE%89%E8%A3%85Docker%2F</url>
    <content type="text"><![CDATA[安装yum源1yum -y install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 更新yum1yum update -y 安装docker1yum install docker-io -y 查看docker版本1docker version 启动docker服务1service docker start]]></content>
      <categories>
        <category>Docker</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令(持续更新)]]></title>
    <url>%2F2018%2F10%2F26%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[初始化命令初始化本地仓库1git init config配置1234git config --list #查看配置git config --system user.name #系统级配置git config --global user.name #全局配置，系统用户级git config user.name #仓库级配置 克隆远程仓库到本地12git clone &lt;remote-url&gt;git clone &lt;remote-url&gt; myrep #myrep作为本地仓库名 remot 远程仓库123456git remote -v #查看远程仓库git remote show origin #查看远程仓库git remote add origin &lt;remote-url&gt; #添加远程仓库git remote set-url origin &lt;URL&gt; #修改远程仓库地址git remote rename &lt;remote-name&gt; paul #重命名远程仓库git remote rm paul #移除远程仓库 基础命令查看文件状态12git statusgit status -s #状态简览 暂存已修改文件12git add fileNamegit add . #暂存所有已修改文件 提交更新12git commit -m "commit message"git commit -a -m "commit message" #跳过暂存区，直接提交 推送到远程仓库12git pushgit push origin master 从远程仓库拉取数据1git fetch [remote-name] 合并分支1git merge 与远程仓库同步(fetch+merge)1git pull 分支命令查看分支123456git branch #查看分支，前面带星号*的，是当前分支git branch -r #查看所有远程分支git branch -a #查看所有分支(本地跟远程)git branch -v #查看每个分支最后一次提交git branch --merged #查看已合并到当前分支的分支git branch --no-merged #查看未合并到当前分支的分支 创建分支123git branch &lt;branch-name&gt; #创建分支git checkout -b &lt;branch-name&gt; #创建并切换到本地分支git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt; #创建并切换到远程分支 删除分支12git branch -d &lt;remote-branchname&gt; #删除本地分支，&lt;remote-branchname&gt;：分支名称git push origin --delete &lt;remote-branchname&gt; #删除远程分支 重命名1git branch -m &lt;new-branch-name&gt; 切换分支1git checkout &lt;branch-name&gt; #切换分支 合并分支12git merge hotfix #把 hotfix 分支，合并到当前分支git mergetool #图形化解决冲突的工具 标签命令123456789git tag #查看标签git tag -a &lt;version-number&gt; -m "my version 1.4" #创建附注标签，默认tag是打在最近的一次commit上git tag &lt;version-number&gt; #创建轻量标签&lt;version-number&gt;:v1.0.0git tag -a &lt;version-number&gt; &lt;commit-id&gt; #对某次提交后打标签git push origin &lt;version-number&gt; #上传某个标签，GIT 默认不会 push 标签到远程仓库git push origin --tags #上传所有不在远程仓库的标签git checkout -b version2 v2.0.0 #检出标签git tag -d &lt;tag-name&gt; #删除本地标签git push origin :refs/tags/&lt;tag-name&gt; #删除远程标签 回退还原12345678git fetch --all &amp;&amp; git reset --hard origin/master #抛弃本地所有的修改，回到远程仓库的状态git checkout -b branch_name tag_name #回退到指定标签版本git checkout &lt;file-name&gt; #放弃工作区的修改git checkout . #放弃所有修改git reset &lt;commit-id&gt; #默认就是-mixed参数。git reset –mixed HEAD^ #回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。git reset –soft HEAD~3 #回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可 git reset –hard &lt;commit-id&gt; #彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容 其它命令diff比较12git diff #比较 暂存区－工作区git diff --staged #比较 仓库－暂存区 提交历史12$ git log$ git log --stat #展示提交的简略统计信息]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更换Hexo博客主题]]></title>
    <url>%2F2018%2F10%2F01%2F%E6%9B%B4%E6%8D%A2Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[根据上一篇博客 使用Hexo搭建个人博客我们已经看见个人博客的雏形了，但是博客网页一点也不高大上，为了让它看起来更美观一些，现在我们来为其更换主题，这里以使用github上的next主题为例(本博客站亦是用的next主题)。注意：如未特别声明，本文所有命令均默认在Git Bash命令窗口中执行 配置主题创建next文件夹在本地博客根目录下，鼠标右键打开Git Bash命令窗口，执行以下命令1mkdir themes/next 下载Next主题此步骤可参考Next官方文档亦可直接执行以下命令1git clone https://github.com/iissnan/hexo-theme-next themes/next 下载成功后我们会看到Next的主题已经存在themes目录下的next文件夹中 更换主题配置修改博客根目录下的_config.yml文件(注意:这里是博客配置文件，不是next下的主题配置文件)，搜索theme字段，并将其值修改为next 优化主题站点配置编辑博客配置文件(根目录下的_config.yml文件)123456789101112# 主标题title: 菜鸟逆袭# 副标题subtitle: 成长笔记# 个人签名description: 没有天生的信心，只有不断培养的信心，坚强的毅力可以征服世界上任何一座高峰。keywords:# 作者author: 武尊# 博客使用语言(zh-Hans表示使用中文)language: zh-Hanstimezone: 主题选择编辑主题配置文件(themes/next/_config.yml)，查找scheme12345# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 选择你喜欢的，去掉前面的#号，其他加上#号(即注释掉的意思)。本博客站使用的是Pisces主题 设置目录默认只有两个目录(首页和归档),如果还需添加，编辑主题配置文件(themes/next/_config.yml)，查询menu12345678910111213141516171819menu: # 首页 home: / || home # 关于 #about: /about/ || user # 标签 tags: /tags/ || tags # 分类 categories: /categories/ || th # 归档 archives: /archives/ || archive # 搜索 #search: /search/ || search # 日程表 #schedule: /schedule/ || calendar # 站点地图 #sitemap: /sitemap.xml || sitemap # 404页面 #commonweal: /404/ || heartbeat 将需要的Menu前面#号去掉即可 初始化对应的Menu如果我们上一步添加了标签页，此时点击标签菜单会出现Cannot GET /tags/错误，我们需要创建一个标签页面，执行以下命令：1hexo new page "tags" 成功后在博客的根目录下的/source目录中会创建一个tags文件夹，我们进入该文件夹(/source/tags)编辑index.md文件,添加type: &quot;tags&quot;12345---title: tagsdate: 2018-09-23 18:41:09type: "tags"--- 其它目录也同理创建 设置动态背景编辑主题配置文件(themes/next/_config.yml)，查找canvas_nest修改为true即可12# Canvas-nestcanvas_nest: true 设置头像编辑主题配置文件(themes/next/_config.yml)，查询avatar添加头像链接地址1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: http://pfgzzdcxg.bkt.clouddn.com/avatar.png 文章添加结束语 添加模板文件在主题目录\themes\next\layout_macro中新建 passage-end-tag.swig文件,并添加以下内容： 1234567&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt; -------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读------------- &lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 导入模板文件在\themes\next\layout_macro\post.swig文件中，找到END POST BODY在之前添加： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 如图: 配置编辑主题配置文件(themes/next/_config.yml)，查找passage_end_tag修改为true123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 本文参考Hexo-NexT配置超炫网页效果。其它更酷炫的效果也请参考Hexo-NexT配置超炫网页效果进行配置。]]></content>
      <categories>
        <category>Hexo</category>
        <category>Next</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git配置ssh key]]></title>
    <url>%2F2018%2F09%2F24%2Fgit%E9%85%8D%E7%BD%AEssh-key%2F</url>
    <content type="text"><![CDATA[注意：如未特别声明，本文所有命令均默认在Git Bash命令窗口中执行 检查一下用户名和邮箱是否配置执行一下命令检查用户名和邮箱配置：1git config --global --list 我的机器显示信息如下（已配置）： 配置用户名跟邮箱如未配置，则执行以下命令进行配置：12git config --global user.name "这里换上你的用户名"git config --global user.email "这里换上你的邮箱" 检查是否已有ssh执行一下命令检查是否已有ssh1cd ~/.ssh 切换成功则表示已有ssh(路径默认为C盘&gt;用户&gt;用户名&gt;.ssh下)，可直接跳过以下生成ssh步骤，反之表示没有。 生成ssh执行以下命令生成ssh：1ssh-keygen -t rsa -C "这里换上你的邮箱" 执行命令后需要进行3次或4次确认： 确认秘钥的保存路径（如果不需要改路径则直接回车,建议直接回车）; 如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）; 创建密码（如果不需要密码则直接回车建议直接回车）; 确认密码（创建密码是直接回车，这里同样直接回车，否则输入创建密码）； 在指定的保存路径下会生成2个名为id_rsa和id_rsa.pub的文件: 配置gitHub进入gitHub设置页面： 选择SSH and GPG keys 添加ssh key使用文本工具打开之前生成的id_rsa.pub文件，把内容复制到下面的输入框(Key) 测试配置是否成功1ssh -T git@github.com 出现如下图所示内容表示成功]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客]]></title>
    <url>%2F2018%2F09%2F24%2F%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一、准备工作Hexo介绍 Hexo是一个快速、简洁且高效的博客框架，它基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。 安装Node.js环境 Hexo是基于Node.js的，因此在安装Hexo之前，我们需要先安装Node.js环境。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。 下载地址：https://nodejs.org/en/ 测试安装：执行node -v命令，显示版本号即安装成功 安装Git工具 Git是目前世界上最流行的分布式版本控制系统。使用Git可以帮助我们把本地的网页和文章等内容提交到Github上，实现同步。 下载地址：https://git-scm.com/ 测试安装：执行git --version命令，显示版本号即安装成功 安装Hexo工具 Hexo是一个快速、简洁且高效的博客框架。 安装：执行npm install -g hexo-cli命令即可安装成功 测试：执行hexo -v命令,显示版本号即安装成功 注册gitHub账号 gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名gitHub。 注册地址: https://github.com 注册流程：如果gitHub都不会注册，你可以放弃观看本文或自行百度一下 注意：注册gitHub时，一定要选择一个合适的用户名，因为后期博客的访问域名将会使用该用户名。 配置git ssh key 请参考 git配置 ssh key 二、开始搭建博客创建本地博客 在本地合适的目录点击鼠标右键打开命令窗口，如图:执行命令：hexo init my-blogmy-blog为项目名，自定义即可,如图： 测试博客12345678# 进入项目根目录cd my-blog# 安装项目依赖npm install# 生成博客hexo g# 启动服务hexo s 如图表示项目启动成功，在浏览器中访问localhost:4000即可访问： 发布项目到gitHub 经过以上步骤，我们的博客已经搭建成功，但是只能自己本地访问，显然不是我们最终希望的结果，若要别人也能看到，那就需要我们将其同步部署到GitHub上了。 登录gitHub 创建仓库这个过程和建立普通的仓库没什么区别，关键在于新仓库的名字，一定要是UserName + .github.io的形式。例如你的用户名为blog,则仓库名称为blog.github.io,如图: 发布项目进入本地项目的根目录打开_config.yml站点配置文件，找到deploy参数做如下修改:repository参数值为gitHub仓库的SSH连接，在刚才新建的仓库中复制即可，如图：最后在根目录中执行bash命令12npm install hexo-deployer-git —save # 安装部署插件hexo d #部署到gitHub 等待1~3分钟后，浏览器中输入https://userName.github.io即可访问到我们的博客了，至此我们的个人博客搭建完成。Hexo官方文档]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
